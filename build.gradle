plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
	id 'com.palantir.docker' version '0.25.0'
}

def versionObj = new Version(major: 0, minor: 19, revision: 0)

sourceCompatibility = 15
targetCompatibility = 15

allprojects {
    group 'com.github.natanbc'
    version versionObj.toString()
}

ext {
    //@formatter:off
    configVersion =         '1.4.0'
    jdaNasVersion =         '1.1.0'
    jsr305Version =         '3.0.2'
    koeVersion =            '454cfec'
    lavaplayerVersion =     'a63c541dc5'
    ytRotatorVersion =      '0.1.7'
    lavadspVersion =        '0.5.2'
    logbackVersion =        '1.2.3'
    magmaVersion =          '0.12.5'
    nativeLoaderVersion =   '0.3.0' 
    prometheusVersion =     '0.9.0'
    sentryVersion =         '1.7.30'
    vertxWebVersion =       '3.9.3'
    
    jattachVersion =        'v1.5'
    //@formatter:on
}

mainClassName = 'andesite.Andesite'

repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/natanbc/maven' }
    maven { url 'https://dl.bintray.com/sedmelluq/com.sedmelluq' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile project(':api')

    //Config
    compile "com.typesafe:config:$configVersion"
    
    //REST, WebSocket, etc
    compile "io.vertx:vertx-web:$vertxWebVersion"

    //Audio sending
    compile "space.npstr.Magma:magma:$magmaVersion"

    //Audio sending
    //compile "moe.kyokobot:koe:$koeVersion"

    //Audio player
    compile "com.github.Devoxin:lavaplayer:$lavaplayerVersion"

    //IPv6 rotation
    compile "com.sedmelluq:lavaplayer-ext-youtube-rotator:$ytRotatorVersion"

    //Audio filters
    compile "com.github.natanbc:lavadsp:$lavadspVersion"
    //override the native loader version lavadsp uses
    compile "com.github.natanbc:native-loader:$nativeLoaderVersion"

    //Native send system
    compile "com.sedmelluq:jda-nas:$jdaNasVersion"

    //Logger implementation
    compile "ch.qos.logback:logback-classic:$logbackVersion"

    //Error tracking
    compile "io.sentry:sentry:$sentryVersion"
    compile "io.sentry:sentry-logback:$sentryVersion"

    //Metrics
    compile "io.prometheus:simpleclient:$prometheusVersion"
    compile "io.prometheus:simpleclient_hotspot:$prometheusVersion"
    compile "io.prometheus:simpleclient_logback:$prometheusVersion"

    //Code safety
    compile "com.google.code.findbugs:jsr305:$jsr305Version"
}

docker {
    name "natanbc/andesite:${getCommitHash()}"
    //only set latest tag for releases, so `docker pull natanbc/andesite`
    //pulls the latest stable version
    if(System.getenv("TAG") != null && !System.getenv("TAG").trim().isEmpty()) {
        tag 'versioned', "natanbc/andesite:${versionObj}"
        tag 'latest', 'natanbc/andesite:latest'
    }
    files "build/libs/andesite-${versionObj}-all.jar",
            project(':jattach-debug-plugin').getTasksByName('jar', false).outputs,
            "jlink.sh"
    buildArgs([
        version: versionObj.toString(),
        jattachVersion: jattachVersion
    ])
}

def natives = [
        'all',
        'darwin',
        'linux-arm',
        'linux-x86',
        'linux-x86-64',
        'win-x86',
        'win-x86-64'
]

task buildAll {}

tasks.docker.dependsOn buildAll
buildAll.dependsOn ':jattach-debug-plugin:jar'
buildAll.dependsOn ':api:jar'
buildAll.dependsOn ':api:javadoc'

task ci {
    dependsOn buildAll
    dependsOn tasks.docker
    dependsOn dockerTag
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

jar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

natives.each { arch ->
    def shadowTask = task("shadow-${arch}", type: ShadowJar) {
        archiveClassifier.set(arch)

        from project.sourceSets.main.output
        configurations = [ project.configurations.runtime ]
        manifest.inheritFrom project.tasks.jar.manifest

        exclude 'module-info.class'
        exclude 'lombok/**'
        exclude 'vertx-web-js/**'
        exclude 'vertx-web/**'
        exclude 'vertx-auth-common-js/**'
        exclude 'vertx-auth-common/**'
        exclude 'vertx-bridge-common-js/**'
        exclude 'vertx-bridge-common/**'
        exclude 'vertx-core/**'
        exclude 'Class50/**'
        exclude 'com/zwitserloot/**'
        exclude 'secondaryLoading.SCL.lombok/**'
        if(arch != 'all') {
            natives.each {
                if(it != arch) {
                    exclude "natives/${it}/**"
                }
            }
        }
    }
    buildAll.dependsOn shadowTask
}

def lint = [
        "auxiliaryclass",
        "cast",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        "rawtypes",
        "removal",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/Version.java'
        filter(ReplaceTokens, tokens: [
                VERSION_MAJOR:    versionObj.major,
                VERSION_MINOR:    versionObj.minor,
                VERSION_REVISION: versionObj.revision,
                COMMIT:           getCommitHash(),
                BUILD_NUMBER:     getBuildNumber()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'Version.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.compilerArgs += ["-Xlint:${lint.join(",")}", "-Werror"]
}

compileTestJava.enabled = false
processTestResources.enabled = false

class Version {
    String major, minor, revision

    String toString() {
        "$major.$minor.$revision"
    }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}

def getBuildNumber() {
    def properties = [
            "BUILD_NUMBER",
            "TRAVIS_BUILD_NUMBER"
    ]
    for(name in properties) {
        String property
        if(hasProperty(name)) {
            property = project.properties[name]
        } else {
            property = System.getenv(name) ?: ""
        }
        if(property != "") {
            return property
        }
    }
    return "unable to find build number"
}
